---
title: "650_HW0"
author: "GSIs"
date: "09/12/2023"
output:
  html_document: default
  pdf_document: default
---

*(0) If you have not already, install the packages first. You will then need to load the packages each time you execute your R script.*

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# install.packages("sas7bdat")
# install.packages("corrplot")
# install.packages("tidyverse")
# remotes::install_github("ddsjoberg/gtsummary") ## to successfully install package "gtsummary" you need to update all required dependent package to the newest version.
library("sas7bdat")
library("corrplot")
library("gtsummary")
library("dplyr")
library(haven)

```

*(1) Orient yourself around the dataset, determine complete cases.*

```{r}
setwd("/Users/kuonijiwa/Documents/OneDrive/master1/bios650/hw2")
mySASData = read_sas("completedata.sas7bdat") #paste in the path where you save your data

dim(mySASData)

##select the cases for which we have complete data on the following variables of interest:
var= c("Age", "Comorbidity1", "CurrentSmoker", "Depression", "Fatalism",
       "HiChol", "Htn", "NIHScore", "R_E", "Optimism", "Pessimism", 
       "Sex", "Spirituality", "Education", "Afib", "Cad", "Db", "HxStroke")
pos=list()
for(i in 1:length(var)){pos[[i]]=grep(var[i],colnames(mySASData))}
pos=unlist(pos)
fullData = mySASData[,pos]
dim(fullData)
fullData$Incomplete = rep(0,nrow(fullData))
for(i in 1:nrow(fullData)){
  if(sum(is.na(fullData[i,]))!=0){fullData$Incomplete[i]=1}
}
table(fullData$Incomplete)

##categorize variable age
fullData$Age_4Cat=rep(4,nrow(fullData))
for (i in 1:nrow(fullData)){
  if (is.na(fullData$Age[i])==FALSE){
    if (fullData$Age[i] <= 54){
      fullData$Age_4Cat[i] = "<=54"
    } else if (fullData$Age[i] <= 64 ){
      fullData$Age_4Cat[i] = "55-64"
    } else if (fullData$Age[i] <= 74 ){
      fullData$Age_4Cat[i] = "65-74"
    } else if (fullData$Age[i] >74) {
      fullData$Age_4Cat[i] = ">=75"
    }
    } else {
    fullData$Age_4Cat[i] = NaN
  }
}
fullData$Age_4Cat = as.factor(fullData$Age_4Cat)
table(fullData$Age_4Cat)

##categorize variable NIHScore
fullData$NIHScore_Cat=rep(4,nrow(fullData))
for (i in 1:nrow(fullData)){
  if (is.na(fullData$NIHScore[i])==FALSE){
    if (fullData$NIHScore[i] <= 1){
      fullData$NIHScore_Cat[i] = "0-1"
    } else if (fullData$NIHScore[i] <= 3 ){
      fullData$NIHScore_Cat[i] = "2-3"
    } else if (fullData$NIHScore[i] <= 7 ){
      fullData$NIHScore_Cat[i] = "4-7"
    } else if (fullData$NIHScore[i] > 7) {
      fullData$NIHScore_Cat[i] = ">7"
    }
    } else {
    fullData$NIHScore_Cat[i] = NaN
  }
}
fullData$NIHScore_Cat = as.factor(fullData$NIHScore_Cat)
table(fullData$NIHScore_Cat)

## Merging Education Status into two levels
fullData$EducationHS=ifelse(fullData$Education==1,1,0)

## Subsetting the completeData from fullData
completeData=fullData[which(fullData$Incomplete==0),]

##get summary statistics for categorical variable (Age, NIHScore)
aggregate(completeData$Age, by=list(completeData$Age_4Cat), FUN=mean) #mean Age for each category
aggregate(completeData$NIHScore, by=list(completeData$NIHScore_Cat), FUN=sd) #NIHScore sd for each category
```

*(2) Compare complete to non-complete cases with graphs and t or Ï‡2 tests.*

```{r message=FALSE, warning= FALSE}
# Simple Linear Regression for Depression vs Fatalism
fit <- lm(Depression ~ Fatalism, data = completeData)
summary(fit)
```

```{r}

# Load the required libraries if they're not already loaded
library(dplyr)

# Assuming 'completeData' is already loaded and contains the variables of interest

# Calculate mean depression for males and females
mean_depression_male <- mean(completeData$Depression[completeData$Sex == 0], na.rm = TRUE)
mean_depression_female <- mean(completeData$Depression[completeData$Sex == 1], na.rm = TRUE)

# Calculate the difference in means
difference_in_means <- mean_depression_female - mean_depression_male

# Perform two-sample t-tests
# Assuming equal variances
t_test_equal <- t.test(Depression ~ Sex, data = completeData, var.equal = TRUE)

# Not assuming equal variances
t_test_unequal <- t.test(Depression ~ Sex, data = completeData, var.equal = FALSE)

# Output the p-values from both tests
p_value_equal_variances <- t_test_equal$p.value
p_value_unequal_variances <- t_test_unequal$p.value

# Print results
cat("Mean Depression for Males:", mean_depression_male, "\n")
cat("Mean Depression for Females:", mean_depression_female, "\n")
cat("Difference in Means:", difference_in_means, "\n")
cat("P-value assuming equal variances:", p_value_equal_variances, "\n")
cat("P-value not assuming equal variances:", p_value_unequal_variances, "\n")
```

```{r}
library(car)  # for residuals calculation and studentized residuals
library(ggplot2)  # for plotting

# Assuming 'stroke_data' is the name of your dataset
model <- lm(Fatalism ~ Age + Sex + R_E + Comorbidity1 + Education, data = completeData)

# Different types of residuals
sigma = 5.171
residuals_regular <- residuals(model)
residuals_standardized <- model$residuals / sigma
residuals_studentized <- rstandard(model)
residuals_externally_studentized <- rstudent(model)

# Leverage values
leverage_values <- hatvalues(model)

# Squared residuals for weighting in Plot 2
residuals_squared <- residuals_regular^2

# Data frame for plotting
residuals_data <- data.frame(
  Standardized = residuals_standardized,
  Studentized = residuals_studentized,
  Externally_Studentized = residuals_externally_studentized,
  Leverage = leverage_values,
  Squared_Residual = residuals_squared
)

# Calculate the difference between Studentized and Standardized residuals
residuals_data$Difference_Studentized_Standardized <- residuals_studentized - residuals_standardized

# Plot 1: Difference between Studentized and Standardized Residuals
ggplot(residuals_data, aes(x = Standardized, y = Difference_Studentized_Standardized)) +
  geom_point(aes(color = Leverage), alpha = 0.7, shape = 16) +  # Change point shape and add color by leverage
  scale_color_viridis_c(name = "Leverage") +  # Using viridis color scale
  labs(
    x = "Standardized Residuals",
    y = "Difference: Studentized - Standardized",
    title = "Difference between Studentized and Standardized Residuals"
  ) +
  theme_light() +  # Light theme with grid lines
  theme(
    plot.title = element_text(hjust = 0.5, face = "italic", size = 14),  # Italicize and adjust title size
    axis.title = element_text(face = "bold"),
    axis.text = element_text(size = 12)  # Increase axis text size for readability
  )

# Calculate the difference between Externally Studentized and Studentized residuals
residuals_data$Difference_Externally_Studentized_Studentized <- residuals_externally_studentized - residuals_studentized

# Plot 2: Difference between Externally Studentized and Studentized Residuals (Updated style)
ggplot(residuals_data, aes(x = Studentized, y = Difference_Externally_Studentized_Studentized)) +
  geom_point(aes(color = Leverage), alpha = 0.7, shape = 16) +  # Change point shape and color by leverage
  scale_color_viridis_c(name = "Leverage") +  # Using the same viridis color scale for consistency
  labs(
    x = "Studentized Residuals",
    y = "Difference: Externally Studentized - Studentized",
    title = "Difference between Externally Studentized and Studentized Residuals"
  ) +
  theme_light() +  # Light theme with grid lines
  theme(
    plot.title = element_text(hjust = 0.5, face = "italic", size = 14),  # Same title style as Plot 1
    axis.title = element_text(face = "bold"),
    axis.text = element_text(size = 12)  # Consistent axis text size
  )


```
